---
# tasks file for roles/kvm
- name: disable UseDNS in the /etc/ssh/sshd_config file
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^UseDNS"
    line: "UseDNS no"
    insertafter: EOF
    state: present
  notify: reload ssh

#TODO: examine current dns dns server on the kvm host
#      keep that value, check it's validity. Set it to something useful

- name: enable SELinux
  selinux:
    policy: targeted
    state: enforcing

- name: turn off requiretty for sudo
  lineinfile:
    dest: /etc/sudoers
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
     - { line: "Defaults !requiretty", state: present }
     - { line: "Defaults requiretty", state: absent }

- name: set hostname
  hostname:
    name: "{{ kvm_hostname_full }}"

- name: check if virtualization extensions exist
  command: grep -E 'svm|vmx' /proc/cpuinfo
  register: virt_check
  changed_when: false
  failed_when: false

- name: get extra repo files to delete
  find:
    paths: /etc/yum.repos.d/
    patterns: "^rhel-7*.repo"
    use_regex: true
  register: wildcard_files_to_delete

- name: delete extra repo files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ wildcard_files_to_delete.files }}"

- name: yum clean all
  command: yum clean all
  register: yum_clean_result
  changed_when: '"Cleaning repos" in yum_clean_result.stdout'

- name: update packages
  yum:
    name: '*'
    state: latest
  register: yum_result_update
  async: 1000
  poll: 30
  until: yum_result_update is success
  retries: 4
  delay: 5

- name: check Kernel is the Latest
  shell: |
    if [ $(uname -r) == $(rpm -q kernel | tail -n 1 | sed -e 's/kernel-//g') ] ; then
      echo no ;
    else
      echo reboot;
    fi
  ignore_errors: true
  register: reboot_hint
  changed_when: false

- name: install several useful utility and kvm packages
  yum:
    name: "{{ kvm_packages }}"
    state: latest
  register: yum_result_install
  until: yum_result_install is success
  retries: 4
  delay: 5

- name: copying kvm.conf file
  copy:
    src: files/kvm.conf
    dest: /etc/modprobe.d/kvm.conf
    owner: root
    group: root
    mode: 0644

- name: Stop libvirtd since it has a mount on a partition on the second disk
  service:
    name: libvirtd
    enabled: yes
    state: stopped

- name: unmount libvirt images
  mount:
    path: /var/lib/libvirt/images
    state: unmounted
  when: kvm_disks.libvirt_images is defined

- name: "read {{ kvm_disks.libvirt_images }} device information (always use unit when probing)"
  parted:
    device: "/dev/{{ kvm_disks.libvirt_images }}"
    unit: MiB
  register: libvirt_images_info
  when: kvm_disks.libvirt_images is defined

- name: "remove all partitions from {{ kvm_disks.libvirt_images }}"
  parted:
    device: "/dev/{{ kvm_disks.libvirt_images }}"
    number: "{{ item.num }}"
    state: absent
  with_items:
   - "{{ libvirt_images_info.partitions }}"
  ignore_errors: true
  when: kvm_disks.libvirt_images is defined

- name: "create 1 primary partition on {{ kvm_disks.libvirt_images }}"
  parted:
    device: "/dev/{{ kvm_disks.libvirt_images }}"
    number: 1
    state: present
    label: gpt
  when: kvm_disks.libvirt_images is defined

- name: "format {{ kvm_disks.libvirt_images }}1 xfs"
  filesystem:
    fstype: xfs
    dev: "/dev/{{ kvm_disks.libvirt_images }}1"
    force: "{{ kvm_disks.destructive_filesystem }}"
  when:
    - kvm_disks.libvirt_images is defined
    - kvm_disks.destructive_filesystem is defined

- name: "create 1 primary partition on {{ kvm_disks.libvirt_images }}"
  parted:
    device: "/dev/{{ kvm_disks.libvirt_images }}"
    number: 1
    state: present
    label: gpt
  when:
    - kvm_disks.libvirt_images is defined
    - kvm_disks.destructive_filesystem is defined

- name: "format {{ kvm_disks.libvirt_images }}1 xfs"
  filesystem:
    fstype: xfs
    dev: "/dev/{{ kvm_disks.libvirt_images }}1"
    force: "{{ kvm_disks.destructive_filesystem }}"
  when:
    - kvm_disks.libvirt_images is defined
    - kvm_disks.destructive_filesystem is defined

- name: "mount {{ kvm_disks.libvirt_images }}1 for libvirt images"
  mount:
    path: /var/lib/libvirt/images
    src: "/dev/{{ kvm_disks.libvirt_images }}1"
    fstype: xfs
    opts: defaults
    state: mounted
  when: kvm_disks.libvirt_images is defined

- name: starting libvirtd back up
  service:
    name: libvirtd
    enabled: yes
    state: started

- name: generate ssh key for use across systems
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: /root/.ssh/id_rsa

- name: copy over ssh config
  copy:
    src: files/ssh_config
    dest: /root/.ssh/config

- name: copy over the rhel guest image for later virtual disk images
  copy:
    src: "/usr/share/rhel-guest-image-7/rhel-guest-image-7.2-20160302.0.x86_64.qcow2"
    dest: "/var/lib/libvirt/images/rhel-guest-image-7.qcow2"
    remote_src: true

- name: remove cloud-init and set root password on base rhel 7 guest image
  command: >
    virt-customize -a /var/lib/libvirt/images/rhel-guest-image-7.qcow2
    --root-password password:redhat --uninstall cloud-init
  register: rhel7_virt_customize
  changed_when: '"Finishing off" in rhel7_virt_customize.stdout'

- name: copy over ansible.cfg
  copy:
    src: "files/ansible.cfg"
    dest: /root/ansible.cfg

- name: copy chrony.conf script for disconnected ntp master
  template:
    src: "templates/chrony.conf.j2"
    dest: /etc/chrony.conf
  when: disconnected is defined

- name: restarting chronyd service
  service:
    name: chronyd
    state: restarted
    enabled: yes
  when: disconnected is defined

- name: add NTP to firewalld
  firewalld:
    service: ntpd
    permanent: true
    state: enabled
    immediate: yes
  when: disconnected is defined

- meta: flush_handlers
